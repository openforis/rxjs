"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var marble_testing_1 = require("../helpers/marble-testing");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
describe('window operator', function () {
    asDiagram('window')('should emit windows that close and reopen', function () {
        var source = marble_testing_1.hot('---a---b---c---d---e---f---g---h---i---|    ');
        var sourceSubs = '^                                      !    ';
        var closings = marble_testing_1.hot('-------------w------------w----------------|');
        var closingSubs = '^                                      !    ';
        var expected = 'x------------y------------z------------|    ';
        var x = marble_testing_1.cold('---a---b---c-|                              ');
        var y = marble_testing_1.cold('--d---e---f--|                 ');
        var z = marble_testing_1.cold('-g---h---i---|    ');
        var expectedValues = { x: x, y: y, z: z };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(sourceSubs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should return a single empty window if source is empty and closings are basic', function () {
        var source = marble_testing_1.cold('|');
        var sourceSubs = '(^!)';
        var closings = marble_testing_1.cold('--x--x--|');
        var closingSubs = '(^!)';
        var expected = '(w|)';
        var w = marble_testing_1.cold('|');
        var expectedValues = { w: w };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(sourceSubs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should return a single empty window if source is empty and closing is empty', function () {
        var source = marble_testing_1.cold('|');
        var sourceSubs = '(^!)';
        var closings = marble_testing_1.cold('|');
        var closingSubs = '(^!)';
        var expected = '(w|)';
        var w = marble_testing_1.cold('|');
        var expectedValues = { w: w };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(sourceSubs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should return a single empty window if source is sync empty and closing is sync empty', function () {
        var source = marble_testing_1.cold('(|)');
        var sourceSubs = '(^!)';
        var expected = '(w|)';
        var w = marble_testing_1.cold('|');
        var expectedValues = { w: w };
        var result = source.pipe(operators_1.window(rxjs_1.EMPTY));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(sourceSubs);
    });
    it('should split a Just source into a single window identical to source, using a Never closing', function () {
        var source = marble_testing_1.cold('(a|)');
        var sourceSubs = '(^!)';
        var closings = marble_testing_1.cold('-');
        var closingSubs = '(^!)';
        var expected = '(w|)';
        var w = marble_testing_1.cold('(a|)');
        var expectedValues = { w: w };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(sourceSubs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should return a single Never window if source is Never', function () {
        var source = marble_testing_1.cold('------');
        var sourceSubs = '^     ';
        var closings = marble_testing_1.cold('------');
        var closingSubs = '^     ';
        var expected = 'w-----';
        var w = marble_testing_1.cold('------');
        var expectedValues = { w: w };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(sourceSubs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should be able to split a never Observable into timely empty windows', function () {
        var source = marble_testing_1.hot('^--------');
        var sourceSubs = '^       !';
        var closings = marble_testing_1.cold('--x--x--|');
        var closingSubs = '^       !';
        var expected = 'a-b--c--|';
        var a = marble_testing_1.cold('--|      ');
        var b = marble_testing_1.cold('---|   ');
        var c = marble_testing_1.cold('---|');
        var expectedValues = { a: a, b: b, c: c };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(sourceSubs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should emit an error-only window if outer is a simple throw-Observable', function () {
        var source = marble_testing_1.cold('#');
        var sourceSubs = '(^!)';
        var closings = marble_testing_1.cold('--x--x--|');
        var closingSubs = '(^!)';
        var expected = '(w#)';
        var w = marble_testing_1.cold('#');
        var expectedValues = { w: w };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(sourceSubs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should handle basic case with window closings', function () {
        var source = marble_testing_1.hot('-1-2-^3-4-5-6-7-8-9-|         ');
        var subs = '^              !         ';
        var closings = marble_testing_1.hot('---^---x---x---x---x---x---|');
        var closingSubs = '^              !         ';
        var expected = 'a---b---c---d--|         ';
        var a = marble_testing_1.cold('-3-4|                    ');
        var b = marble_testing_1.cold('-5-6|                ');
        var c = marble_testing_1.cold('-7-8|            ');
        var d = marble_testing_1.cold('-9-|         ');
        var expectedValues = { a: a, b: b, c: c, d: d };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(subs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should handle basic case with window closings, but outer throws', function () {
        var source = marble_testing_1.hot('-1-2-^3-4-5-6-7-8-9-#         ');
        var subs = '^              !         ';
        var closings = marble_testing_1.hot('---^---x---x---x---x---x---|');
        var closingSubs = '^              !         ';
        var expected = 'a---b---c---d--#         ';
        var a = marble_testing_1.cold('-3-4|                    ');
        var b = marble_testing_1.cold('-5-6|                ');
        var c = marble_testing_1.cold('-7-8|            ');
        var d = marble_testing_1.cold('-9-#         ');
        var expectedValues = { a: a, b: b, c: c, d: d };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(subs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should stop emitting windows when outer is unsubscribed early', function () {
        var source = marble_testing_1.hot('-1-2-^3-4-5-6-7-8-9-|         ');
        var subs = '^       !                ';
        var closings = marble_testing_1.hot('---^---x---x---x---x---x---|');
        var closingSubs = '^       !                ';
        var expected = 'a---b----                ';
        var a = marble_testing_1.cold('-3-4|                    ');
        var b = marble_testing_1.cold('-5-6                 ');
        var unsub = '        !                ';
        var expectedValues = { a: a, b: b };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result, unsub).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(subs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should not break unsubscription chains when result is unsubscribed explicitly', function () {
        var source = marble_testing_1.hot('-1-2-^3-4-5-6-7-8-9-|         ');
        var subs = '^       !                ';
        var closings = marble_testing_1.hot('---^---x---x---x---x---x---|');
        var closingSubs = '^       !                ';
        var expected = 'a---b----                ';
        var a = marble_testing_1.cold('-3-4|                    ');
        var b = marble_testing_1.cold('-5-6-                ');
        var unsub = '        !                ';
        var expectedValues = { a: a, b: b };
        var result = source.pipe(operators_1.mergeMap(function (x) { return rxjs_1.of(x); }), operators_1.window(closings), operators_1.mergeMap(function (x) { return rxjs_1.of(x); }));
        marble_testing_1.expectObservable(result, unsub).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(subs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should make outer emit error when closing throws', function () {
        var source = marble_testing_1.hot('-1-2-^3-4-5-6-7-8-9-#');
        var subs = '^   !           ';
        var closings = marble_testing_1.hot('---^---#           ');
        var closingSubs = '^   !           ';
        var expected = 'a---#           ';
        var a = marble_testing_1.cold('-3-4#           ');
        var expectedValues = { a: a };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(subs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
    it('should complete the resulting Observable when window closings completes', function () {
        var source = marble_testing_1.hot('-1-2-^3-4-5-6-7-8-9-|');
        var subs = '^           !   ';
        var closings = marble_testing_1.hot('---^---x---x---|   ');
        var closingSubs = '^           !   ';
        var expected = 'a---b---c---|   ';
        var a = marble_testing_1.cold('-3-4|           ');
        var b = marble_testing_1.cold('-5-6|       ');
        var c = marble_testing_1.cold('-7-8|   ');
        var expectedValues = { a: a, b: b, c: c };
        var result = source.pipe(operators_1.window(closings));
        marble_testing_1.expectObservable(result).toBe(expected, expectedValues);
        marble_testing_1.expectSubscriptions(source.subscriptions).toBe(subs);
        marble_testing_1.expectSubscriptions(closings.subscriptions).toBe(closingSubs);
    });
});
//# sourceMappingURL=window-spec.js.map